package it.polimi.ingsw.controller;

import it.polimi.ingsw.events.clientmessages.*;
import it.polimi.ingsw.events.servermessages.*;
import it.polimi.ingsw.model.Game;
import it.polimi.ingsw.model.Market;
import it.polimi.ingsw.model.MultiplayerGame;
import it.polimi.ingsw.model.SinglePlayerGame;
import it.polimi.ingsw.model.card.LeaderCard;
import it.polimi.ingsw.model.player.FaithTrack;
import it.polimi.ingsw.network.Server;
import it.polimi.ingsw.model.player.Player;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class GameHandler {
    private Game game;
    private final Server server;

    /**
     * Constructor GameHandler creates a new Server instance.
     * @param server server that will be mange the communications between game and clients.
     */
    public GameHandler(Server server) {
        this.server = server;
    }


    /**
     * Method setPlayersNumber initializes the game as an instance of MultiplayerGame or SinglePlayerGame.
     * @param numberOfPlayers states the number of players
     */
    public void setPlayersNumber(int numberOfPlayers) {
        game = numberOfPlayers > 1 ? new MultiplayerGame() : new SinglePlayerGame();
    }


    /**
     * Method start sets up the instance of game and starts the first turn.
     */
    public void start() {
        game.generateGrid();
        ArrayList<String> playersNicknames = server.getPlayersNameByLobby(server.getLobbyID(this));
        for ( String nickname : playersNicknames) {
            game.addPlayer(nickname);
        }
        game.generateLeaders();
        server.sendEveryone(new GameStarted(), server.getLobbyID(this));
        for ( String nickname : playersNicknames) {
            Set<LeaderCard> leaderCards = game.getPlayerByName(nickname).getLeaders();
            int[] ids = new int[leaderCards.size()];
            int index = 0;
            for(LeaderCard card : leaderCards) {
                ids[index] = card.getCardID();
                index++;
            }
            if (server.isConnected(nickname)) {
                server.getConnectionByPlayerName(nickname).sendToClient(new SendLeaderCards(ids));
            }
        }
        if (game instanceof MultiplayerGame) {
            ((MultiplayerGame) game).setFirstPlayer();
            String nickname = ((MultiplayerGame) game).getFirstPlayer().getNickname();
            if (server.isConnected(nickname)) {
                server.getConnectionByPlayerName(nickname).sendToClient(new StartTurn(nickname));
            }
        }
        else if (game instanceof SinglePlayerGame) {
            String nickname = game.getPlayers().get(0).getNickname();
            if (server.isConnected(nickname)) {
                server.getConnectionByPlayerName(nickname).sendToClient(new StartTurn(nickname));
            }
        }
    }

    /**
     * Method process reads the messages from the client and does the required actions
     * @param nickname identifies the current player
     * @param message identifies the client's request
     */
    public void process(String nickname, ClientMessage message){
        //to implement, instanceof for each message generated by the client
        if(message instanceof StartGame) {start();}
        else if(message instanceof SelectLeaderCards) {
            /*model methods*/
            Set<LeaderCard> cards = game.getPlayerByName(nickname).getLeaders();
            LeaderCard firstCard = (LeaderCard) cards.toArray()[((SelectLeaderCards) message).getFirstCardIndex()];
            LeaderCard secondCard = (LeaderCard) cards.toArray()[((SelectLeaderCards) message).getSecondCardIndex()];
            game.getPlayerByName(nickname).selectLeaderCard(firstCard, secondCard);
        }
        else if(message instanceof TakeResources) {
            Market market = game.getMarket();
            market.insertMarble(((TakeResources) message).getIndex(), ((TakeResources) message).getType());
            game.getPlayerByName(nickname).getDashboard().getWarehouse().addResourcesIntoTemporaryShelf(market.resourceOutput());
        }
        else if(message instanceof BuyCard) {
            game.getPlayerByName(nickname).buyCard(((BuyCard) message).getRow(), ((BuyCard) message).getColumn());
        }
        else if(message instanceof ActivateLeaderCard) {
            Set<LeaderCard> leaderCards = game.getPlayerByName(nickname).getLeaders();
            for(LeaderCard card : leaderCards) {
                if (card.getCardID() == ((ActivateLeaderCard) message).getCardID()) {
                    game.getPlayerByName(nickname).activateLeaderCard(card);
                }
            }
        }
        else if(message instanceof ActivateProduction) {
            for (Integer cardID : ((ActivateProduction) message).getCardsID()) {
                Player player = game.getPlayerByName(nickname);
            }
        }
        else if(message instanceof EndTurn) {
            if (game instanceof MultiplayerGame) {
                FaithTrack track = ((MultiplayerGame) game).getCurrPlayer().getDashboard().getPath();
                if (track.getPlayerPos() == track.getEnd()) {
                    Map<String,Integer> playersPoints = new HashMap<>();
                    String winner = "";
                    int winnerPoints = 0;
                    for(Player player : game.getPlayers()) {
                        int points = player.getVictoryPoints();
                        winner = winnerPoints < points ? player.getNickname() : winner;
                        playersPoints.put(player.getNickname(), points);
                    }
                    server.sendEveryone(new EndGame(playersPoints, winner), server.getLobbyID(this));
                }
                else {
                    ((MultiplayerGame) game).nextPlayer();
                    server.sendEveryone(new StartTurn(((MultiplayerGame) game).getCurrPlayer().getNickname()), server.getLobbyID(this));
                }
            }
        }
    }
}